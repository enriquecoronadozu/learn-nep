<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NEP</title>
    <link>https://enriquecoronadozu.github.io/learn-nep/</link>
    <description>Recent content on NEP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Fri, 09 Mar 2018 00:11:02 +0100</lastBuildDate>
    
	<atom:link href="https://enriquecoronadozu.github.io/learn-nep/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install NEP/RIZE</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/install/</link>
      <pubDate>Fri, 09 Mar 2018 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/install/</guid>
      <description>Installation in Windows In order to start using NEP in Windows you need basically to donwload and install:
 Python 2.7 for x86 The latest version of NEP  Installing Python Before installing NEP in Windows you need to install Python 2.7 for architecture x86. We recomend to use the Windows x86 MSI Installer from offical Python page.
Click here to redirect to the official Python webpage
Very important</description>
    </item>
    
    <item>
      <title>Basic theory</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/tutorials/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/tutorials/</guid>
      <description>This tutorial briefly explains how distributed applications with robots are created. This tutorial is oriented for newcomers engineering students in software architectures, robot middleware and distributed systems. If you already have a lot of experience with frameworks such as ROS, then you can skip this tutorial.  Introduction Robot software development tends to be a complex task. The use of different types of robot generally requires to deal with different sensor devices, actuators and software, each of them working at the same time with different frequency and accessible from different programming languages or executable code.</description>
    </item>
    
    <item>
      <title>Behavior specification</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/behavior/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/behavior/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Communication patterns</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/tutorials_nep/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/tutorials_nep/</guid>
      <description>This tutorial explains how to communicate different nodes using the different communication patterns supported in NEP  Client-Server In the Client-Server pattern a node (Client) sends a request for some data to other node (Server) and then waits for the response to this request. In this section an example of how to create a simple client-server application is shown.
Creates a client The next Python script shown a simple example of a client node.</description>
    </item>
    
    <item>
      <title>Programming languages</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/compatibility/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/compatibility/</guid>
      <description>NEP in CSharp We are still working in this documentation page
Last update 29/01/2018
 It is possible to communicate C# applications (using NetMQ) and python nodes written with NEP (using ZeroMQ). To install NetMQ in a C# project we need to open the Package Manager Console (Tools/NuGet Package Manager/Package Manager Console) and write:
Install-Package AsyncIO -Version 0.1.26 Install-Package NetMQ -Version 4.0.0.1 Install-Package Newtonsoft.Json  About NetMQ version
Tested only in NetMQ version 4.</description>
    </item>
    
    <item>
      <title>RIZE</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/rize/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/rize/</guid>
      <description>We are still working in this documentation page
Last update 22/03/2018
 RIZE (Robot Interface from Zero Experience) is Google Blockly, form and web-based programming interface which can be used to work with heterogeneous and multi-robot systems. RIZE was designed to enable an easy addition of new robots, sensory devices and human behavior understanding algorithms.
The main idea of RIZE is reduce the effort that requires robot development for both end-users and expert programmers using form- and block-based enviroments and automatic code generation tools.</description>
    </item>
    
    <item>
      <title>What is NEP/RIZE?</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/</guid>
      <description>NEP (Node Primitives) is a open, front-end and cross-platform robot programming framework for Robot-Human Interaction.
RIZE (Robot Interface from Zero Experience) is a easy-to-use robot programming and component launching interface for end-user development.
What developers can do with NEP?  Create cross-platform robot components Use different patterns, such as client-server and publish-subscribe patterns, to communicate the robot components Use JSON format to specify complex robot behaviors  What users can do with RIZE?</description>
    </item>
    
  </channel>
</rss>