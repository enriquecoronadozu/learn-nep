<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NEP</title>
    <link>https://enriquecoronadozu.github.io/learn-nep/</link>
    <description>Recent content on NEP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Fri, 09 Mar 2018 00:11:02 +0100</lastBuildDate>
    
	<atom:link href="https://enriquecoronadozu.github.io/learn-nep/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://enriquecoronadozu.github.io/learn-nep/install/</link>
      <pubDate>Fri, 09 Mar 2018 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/install/</guid>
      <description>pre { border-left: 20px solid white; border-right: 50px solid white; padding: 14px; background-color: #F5F5F5; }  Installation in Windows 
In order to start using NEP in Windows you need basically to follow 2 steps:
 Install Python 2 or 3 (We recommend python 2.7) Install the latest version of NEP  Step 1: Install Python 
Before installing NEP in Windows you need to install Python 2.7 or 3.</description>
    </item>
    
    <item>
      <title>Basic theory</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/tutorials/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/tutorials/</guid>
      <description>This tutorial briefly explains how distributed applications with robots are created. This tutorial is oriented for newcomers engineering students in software architectures, robot middleware and distributed systems. If you already have a lot of experience with frameworks such as ROS, then you can skip this tutorial.  Introduction Robot software development tends to be a complex task. The use of different types of robots and applications generally requires to deal with different algorithms, devices and actuators, each of them working in separated process that are executed at the same time.</description>
    </item>
    
    <item>
      <title>JSON Robot Behavior Specification (JRBS)</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/behavior/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/behavior/</guid>
      <description>We are still working in this documentation page
Last update 16/04/2018
 High level, close of mapping and modular robot behaviors are be defined in NEP/RIZE using Robot Behavior Specificiation Language based in JSON format. These behaviors can be simple atomic primitives, complex composite actions, conditions and other decision making definitions. The way how behaviors can be specified in this format is shown in this section.
Primitives A simple primitive can be expressed as a python dictionary as shown bellow:</description>
    </item>
    
    <item>
      <title>NEP API</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/tutorials_nep/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/tutorials_nep/</guid>
      <description>This tutorial explains how to communicate nodes using the patterns supported in NEP  Client-Server 
In the Client-Server pattern a node (Client) sends a request for some data to other node (Server) and then waits for the response to this request. An example of how to create a simple client-server application is shown bellow:
Creates a client in Python  The next Python script shown a simple example of a client node</description>
    </item>
    
    <item>
      <title>Programming languages</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/compatibility/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/compatibility/</guid>
      <description>Python is the main programming language of NEP. However bindings and classes for other programming languages based in ZeroMQ are avaliable in the lib folder.
NEP in CSharp (Visual Studio) We are still working in C# version
For the moment not all the patterns are suported
 It is possible to communicate C# applications (using NetMQ) and python nodes written with NEP (using ZeroMQ). To install NetMQ in a C# project we need to open the Package Manager Console of Visual Studio (Tools/NuGet Package Manager/Package Manager Console) and write:</description>
    </item>
    
    <item>
      <title>Robot Interface from Zero Experience (RIZE)</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/rize/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/rize/</guid>
      <description>We are still working in this documentation page
Last update 22/03/2018
 RIZE (Robot Interface from Zero Experience) is Google Blockly, form and web-based programming interface which can be used to work with heterogeneous and multi-robot systems. RIZE was designed to enable an easy addition of new robots, sensory devices and human behavior understanding algorithms.
The main idea of RIZE is reduce the effort that requires robot development for both end-users and expert programmers using form- and block-based enviroments and automatic code generation tools.</description>
    </item>
    
    <item>
      <title>What is NEP/RIZE?</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/</guid>
      <description>NEP (Node Primitives) is a front-end, open and cross-platform robot programming framework for Robot-Human Interaction.
RIZE (Robot Interface from Zero Experience) is a easy-to-use robot programming and component launching interface for End-User Development.
What developers can do with NEP?  Creates cross-platform robot components using ZeroMQ and nanomsg Communicate ROS-based robots from Windows and MacOSX components Uses different patterns, such as client-server and publish-subscribe, to communicate robot components Send messages between components using standart ROS messages, JSON format or simple strings Use different programming languages, such as Python, C#, Java and Matlab.</description>
    </item>
    
  </channel>
</rss>