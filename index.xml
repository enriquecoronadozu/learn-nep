<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NEP</title>
    <link>https://enriquecoronadozu.github.io/learn-nep/</link>
    <description>Recent content on NEP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Thu, 09 Mar 2017 00:11:02 +0100</lastBuildDate>
    
	<atom:link href="https://enriquecoronadozu.github.io/learn-nep/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic tutorials</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/tutorials/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/tutorials/</guid>
      <description>Basic concepts There are some basic concepts that we need to know in order to create distribuited applications with robot. These concepts are described bellow. If you already have experience with frameworks such as ROS, then you can skip to the next section.
Component-based software Robot software development tends to be a complex task. One way to manage this complexity is using well-conceived guidelines and design patterns, together with programming tools (such as NEP and ROS) that support these architectures.</description>
    </item>
    
    <item>
      <title>Programming languages</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/compatibility/</link>
      <pubDate>Thu, 09 Mar 2017 00:11:02 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/compatibility/</guid>
      <description>NEP in CSharp We are still working in this documentation page
Last update 29/01/2018
 It is possible to communicate C# applications (using NetMQ) and python nodes written with NEP (using ZeroMQ). To install NetMQ in a C# project we need to open the Package Manager Console (Tools/NuGet Package Manager/Package Manager Console) and write:
Install-Package AsyncIO -Version 0.1.26 Install-Package NetMQ -Version 4.0.0.1 Install-Package Newtonsoft.Json  About NetMQ version
Tested only in NetMQ version 4.</description>
    </item>
    
    <item>
      <title>What is NEP (Node Primitives)?</title>
      <link>https://enriquecoronadozu.github.io/learn-nep/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/learn-nep/</guid>
      <description>A cross-platform robot programming framework for Robot-Human interaction.
We are still working in this documentation page
Last update 29/01/2018
 Main features of NEP?  Easy to install Open source Full Windows, Linux and MacOSX support Compatible with ROS (Robot Operating System)  What you can do with NEP?  Creates robot components using client-server and publish-subscribe communication patterns. Design complex Human-Robot interaction applications Communicate components written in different programming languages such as Python, C++ C#, Matlab, etc.</description>
    </item>
    
  </channel>
</rss>